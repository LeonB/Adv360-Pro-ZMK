/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include "keypos_adv360.h"
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// https://zmk.dev/docs/behaviors/caps-word

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings =
                <&kp BACKSPACE>,
                <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // Swapper for smart alt+tab

        at_f: application_toggle_forward {
            compatible = "zmk,behavior-tri-state";
            label = "APPLICATION_TOGGLE";
            #binding-cells = <0>;
            bindings =
                <&kt LGUI>,
                <&kp TAB>,
                <&kt LGUI>;

            ignored-key-positions = <46 42>;
        };
        at_b: application_toggle_back {
            compatible = "zmk,behavior-tri-state";
            label = "APPLICATION_TOGGLE_BACK";
            #binding-cells = <0>;
            bindings =
                <&kt LGUI>,
                <&kp LS(TAB)>,
                <&kt LGUI>;

            ignored-key-positions = <54>;
        };

        /*
    hml: homerow_mods_l {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_L";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick_tap_ms = <175>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      global-quick-tap;
      retro-tap;
      hold-trigger-key-positions = <KEYS_R THUMBS>;
    };

    hmr: homerow_mods_r {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_R";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick_tap_ms = <175>;
      flavor = "balanced";
      bindings = <&kp>, <&kp>;
      global-quick-tap;
      retro-tap;
      hold-trigger-key-positions = <KEYS_L THUMBS>;
    };
    */
    };

    combos {
        compatible = "zmk,combos";

        // pressing both shift keys enables caps_word

        combo_caps {
            timeout-ms = <50>;
            key-positions = <46 59>;
            bindings = <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL      &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &tog 1                                                   &mo 3      &kp N6  &kp N7    &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB        &kp Q      &kp W     &kp E     &kp R      &kp T   &none                                                    &none      &kp Y   &kp U     &kp I      &kp O     &kp P     &kp BSLH
&mt LCTRL ESC  &kp A      &kp S     &kp D     &kp F      &kp G   &none      &kp LGUI  &kp LALT      &kp RALT   &kp RGUI   &none      &kp H   &kp J     &kp K      &kp L     &kp SEMI  &mt RCTRL SQT
&kp LSHFT      &kp Z      &kp X     &kp C     &kp V      &kp B                        &kp HOME      &kp PG_UP                        &kp N   &kp M     &kp COMMA  &kp DOT   &kp FSLH  &kp RSHFT
&mo 2          &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &bspc_del  &mo 4     &kp END       &kp PG_DN  &kp ENTER  &kp SPACE          &kp DOWN  &kp UP     &kp LBKT  &kp RBKT  &mo 2
            >;
        };

        keypad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans      &trans        &trans         &trans
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2     &kp F3    &kp F4    &kp F5     &kp F6  &tog 1                                      &trans  &kp F7  &kp F8     &kp F9    &kp F10   &kp F11    &kp F12
&trans  &trans     &trans    &trans    &trans     &trans  &trans                                      &trans  &trans  &trans     &trans    &trans    &trans     &trans
&trans  &sk LCTRL  &sk LALT  &sk LGUI  &sk LSHFT  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &sk RSHFT  &sk RGUI  &sk RALT  &sk LCTRL  &trans
&trans  &trans     &trans    &trans    &trans     &trans                  &trans      &trans                  &trans  &trans     &trans    &trans    &trans     &trans
&trans  &trans     &trans    &trans    &trans             &trans  &trans  &trans      &trans  &trans  &trans          &trans     &trans    &trans    &trans     &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        nav {
            bindings = <
&trans  &trans                 &trans                 &trans                 &trans                 &trans                 &trans                                      &trans  &trans                 &trans                 &trans                 &trans                 &trans                 &trans
&trans  &kp LC(RS(LA(LG(Q))))  &kp LC(RS(LA(LG(W))))  &kp LC(RS(LA(LG(E))))  &kp LC(RS(LA(LG(R))))  &kp LC(RS(LA(LG(T))))  &trans                                      &trans  &kp LC(RS(LA(LG(Y))))  &kp LC(RS(LA(LG(U))))  &kp LC(RS(LA(LG(I))))  &kp LC(RS(LA(LG(O))))  &kp LC(RS(LA(LG(P))))  &trans
&trans  &kp LC(RS(LA(LG(A))))  &kp LC(RS(LA(LG(S))))  &kp LC(RS(LA(LG(D))))  &kp LC(RS(LA(LG(F))))  &kp LC(RS(LA(LG(G))))  &trans  &trans  &trans      &trans  &trans  &trans  &kp LC(RS(LA(LG(H))))  &at_f                  &kp LS(TAB)            &kp LC(RS(LA(LG(L))))  &kp LC(RS(LA(LG(L))))  &trans
&trans  &kp LC(RS(LA(LG(Z))))  &kp LC(RS(LA(LG(X))))  &kp LC(RS(LA(LG(C))))  &kp LC(RS(LA(LG(V))))  &kp LC(RS(LA(LG(B))))                  &trans      &trans                  &kp LC(RS(LA(LG(N))))  &kp LC(RS(LA(LG(M))))  &trans                 &trans                 &trans                 &trans
&trans  &trans                 &trans                 &trans                 &trans                                        &trans  &trans  &trans      &trans  &trans  &trans                         &trans                 &trans                 &trans                 &trans                 &trans
            >;
        };

        TAB {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};

// vim: set ft=c shiftwidth=2 tabstop=2 expandtab:
